{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/options.js","../lib/empty.js","../lib/slice_start.js","../lib/slice_strides.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeMultiSlice from '@stdlib/slice-base-normalize-multi-slice';\nimport nonreducedDimensions from '@stdlib/slice-base-nonreduced-dimensions';\nimport sliceShape from '@stdlib/slice-base-shape';\nimport take from '@stdlib/array-base-take';\nimport zeros from '@stdlib/array-base-zeros';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport numel from '@stdlib/ndarray-base-numel';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport sliceStart from './slice_start.js';\nimport slice2strides from './slice_strides.js';\nimport options from './options.js';\nimport empty from './empty.js';\n\n\n// MAIN //\n\n/**\n* Returns a read-only view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {MultiSlice} s - multi-slice object\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new MultiSlice( new Slice( null, null, -2 ), new Slice( null, null, -1 ) );\n* // returns <MultiSlice>\n*\n* var y = slice( x, s, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 6.0, 5.0 ], [ 2.0, 1.0 ] ]\n*/\nfunction slice( x, s, strict ) {\n\tvar strides;\n\tvar offset;\n\tvar dtype;\n\tvar shape;\n\tvar order;\n\tvar sdims;\n\tvar ndims;\n\tvar ctor;\n\tvar sh;\n\tvar ns;\n\n\t// Retrieve array meta data:\n\tdtype = x.dtype;\n\tshape = x.shape;\n\tstrides = x.strides;\n\toffset = x.offset;\n\torder = x.order;\n\tndims = shape.length;\n\n\t// Ensure that the number of array dimensions matches the number of slices:\n\tif ( s.ndims !== ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), s.ndims ) );\n\t}\n\t// Resolve the output array constructor:\n\tctor = x.constructor;\n\n\t// If provided a zero-dimensional input array, return a zero-dimensional array view...\n\tif ( ndims === 0 ) {\n\t\treturn new ctor( dtype, x.data, shape, strides, offset, order, options() ); // eslint-disable-line max-len\n\t}\n\t// Resolve the indices of the non-reduced dimensions:\n\tsdims = nonreducedDimensions( s );\n\n\t// Normalize the slice object based on the array shape:\n\tns = normalizeMultiSlice( s, shape, true );\n\n\t// Check whether the slice exceeds array bounds...\n\tif ( ns.code ) {\n\t\tif ( strict ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t}\n\t\t// Normalize again, this time allowing for out-of-bounds indices:\n\t\tns = normalizeMultiSlice( s, shape, false );\n\n\t\t// Compute the slice shape:\n\t\tsh = sliceShape( ns );\n\n\t\t// If the non-reduced dimensions contain elements, this means that at least one reduced dimension exceeded array bounds; in which case, we generate a shape containing zeros:\n\t\tif ( numel( take( sh, sdims ) ) > 0 ) {\n\t\t\tsh = zeros( sh.length );\n\t\t}\n\t} else {\n\t\t// Compute the slice shape:\n\t\tsh = sliceShape( ns );\n\t}\n\t// If the slice does not contain any elements, return an empty array...\n\tif ( numel( sh ) === 0 ) {\n\t\treturn empty( ctor, dtype, take( sh, sdims ), order );\n\t}\n\t// Resolve the index offset of the first element indexed by the slice:\n\toffset = vind2bind( shape, strides, offset, order, sliceStart( ns, shape, strides, 0 ), 'throw' ); // TODO: @stdlib/ndarray/base/sind2bind\n\n\t// Remove reduced dimensions from the slice shape:\n\tsh = take( sh, sdims );\n\n\t// If all dimensions were reduced, return a zero-dimensional array...\n\tif ( sh.length === 0 ) {\n\t\treturn new ctor( dtype, x.data, [], [ 0 ], offset, order, options() );\n\t}\n\t// Update strides according to slice steps:\n\tstrides = slice2strides( ns, strides, sdims ); // TODO: @stdlib/ndarray/base/slice2strides???\n\n\t// Return a slice view:\n\treturn new ctor( dtype, x.data, sh, strides, offset, order, options() );\n}\n\n\n// EXPORTS //\n\nexport default slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns array creation options.\n*\n* @private\n* @returns {Object} options\n*/\nfunction options() {\n\treturn {\n\t\t// Default to always returning read-only arrays:\n\t\t'readonly': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default options;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport zeros from '@stdlib/array-base-zeros';\nimport options from './options.js';\n\n\n// MAIN //\n\n/**\n* Returns an empty n-dimensional ndarray.\n*\n* @private\n* @param {Function} ctor - ndarray constructor\n* @param {string} dtype - array data type\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - layout order\n* @returns {ndarray} empty ndarray\n*/\nfunction empty( ctor, dtype, shape, order ) {\n\tvar strides;\n\tvar ndims;\n\n\tndims = shape.length;\n\tif ( ndims === 0 ) {\n\t\tstrides = [ 0 ];\n\t} else {\n\t\tstrides = zeros( ndims );\n\t}\n\treturn new ctor( dtype, buffer( dtype, 0 ), shape, strides, 0, order, options() ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default empty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sub2ind from '@stdlib/ndarray-base-sub2ind';\n\n\n// MAIN //\n\n/**\n* Resolves the linear index of the first element indexed by a normalized multi-slice.\n*\n* ## Notes\n*\n* -   If `strides` contains negative strides, if an `offset` is greater than `0`, the function returns a linear index with respect to the underlying data buffer. If an `offset` is equal to `0`, the function returns a linear index with respect to the array view. For more information, see `@stdlib/ndarray/base/sub2ind`.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @returns {NonNegativeInteger} linear index of the first element\n*/\nfunction sliceStart( slice, shape, strides, offset ) {\n\tvar data;\n\tvar args;\n\tvar i;\n\n\tdata = slice.data;\n\targs = [ shape, strides, offset ];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\targs.push( data[ i ].start );\n\t}\n\targs.push( 'throw' );\n\treturn sub2ind.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default sliceStart;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves slice strides for a provided normalized multi-slice object.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeIntegerArray} rdims - indices of non-reduced dimensions\n* @returns {IntegerArray} slice strides\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n*\n* var s = new MultiSlice( new Slice( 2, 3, 1 ), new Slice( 10, null, -2 ) );\n* // returns <MultiSlice>\n*\n* var strides = slice2strides( s, [ 8, 2 ], [ 1 ] );\n* // returns [ -4 ]\n*/\nfunction slice2strides( slice, strides, rdims ) {\n\tvar data;\n\tvar out;\n\tvar i;\n\tvar j;\n\n\tdata = slice.data;\n\tout = [];\n\tfor ( i = 0; i < rdims.length; i++ ) {\n\t\tj = rdims[ i ];\n\t\tout.push( strides[j] * data[j].step );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default slice2strides;\n"],"names":["slice","x","s","strict","strides","offset","dtype","shape","order","sdims","ndims","ctor","sh","ns","length","RangeError","format","join","constructor","data","readonly","nonreducedDimensions","normalizeMultiSlice","code","sliceShape","numel","take","zeros","buffer","empty","vind2bind","args","i","push","start","sub2ind","apply","sliceStart","rdims","out","j","step","slice2strides"],"mappings":";;27BAgFA,SAASA,EAAOC,EAAGC,EAAGC,GACrB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAWJ,GARAP,EAAQL,EAAEK,MACVC,EAAQN,EAAEM,MACVH,EAAUH,EAAEG,QACZC,EAASJ,EAAEI,OACXG,EAAQP,EAAEO,MACVE,EAAQH,EAAMO,OAGTZ,EAAEQ,QAAUA,EAChB,MAAM,IAAIK,WAAYC,EAAQ,uIAAwIT,EAAMU,KAAM,KAAOf,EAAEQ,QAM5L,GAHAC,EAAOV,EAAEiB,YAGM,IAAVR,EACJ,OAAO,IAAIC,EAAML,EAAOL,EAAEkB,KAAMZ,EAAOH,EAASC,EAAQG,EChFlD,CAENY,UAAY,IDuFb,GANAX,EAAQY,EAAsBnB,IAG9BW,EAAKS,EAAqBpB,EAAGK,GAAO,IAG5BgB,KAAO,CACd,GAAKpB,EACJ,MAAM,IAAIY,WAAYC,EAAQ,mEAAoET,EAAMU,KAAM,OAG/GJ,EAAKS,EAAqBpB,EAAGK,GAAO,GAGpCK,EAAKY,EAAYX,GAGZY,EAAOC,EAAMd,EAAIH,IAAY,IACjCG,EAAKe,EAAOf,EAAGE,QAElB,MAEEF,EAAKY,EAAYX,GAGlB,OAAqB,IAAhBY,EAAOb,GElGb,SAAgBD,EAAML,EAAOC,EAAOC,GACnC,IAAIJ,EACAM,EAQJ,OAJCN,EADc,KADfM,EAAQH,EAAMO,QAEH,CAAE,GAEFa,EAAOjB,GAEX,IAAIC,EAAML,EAAOsB,EAAQtB,EAAO,GAAKC,EAAOH,EAAS,EAAGI,EDpBxD,CAENY,UAAY,GCmBd,CFwFSS,CAAOlB,EAAML,EAAOoB,EAAMd,EAAIH,GAASD,IAG/CH,EAASyB,EAAWvB,EAAOH,EAASC,EAAQG,EGpG7C,SAAqBR,EAAOO,EAAOH,EAASC,GAC3C,IAAIc,EACAY,EACAC,EAIJ,IAFAb,EAAOnB,EAAMmB,KACbY,EAAO,CAAExB,EAAOH,EAASC,GACnB2B,EAAI,EAAGA,EAAIb,EAAKL,OAAQkB,IAC7BD,EAAKE,KAAMd,EAAMa,GAAIE,OAGtB,OADAH,EAAKE,KAAM,SACJE,EAAQC,MAAO,KAAML,EAC7B,CHwFoDM,CAAYxB,EAAIN,EAAOH,EAAS,GAAK,SAMrE,KAHnBQ,EAAKc,EAAMd,EAAIH,IAGPK,OACA,IAAIH,EAAML,EAAOL,EAAEkB,KAAM,GAAI,CAAE,GAAKd,EAAQG,ECvH7C,CAENY,UAAY,KDwHbhB,EI9GD,SAAwBJ,EAAOI,EAASkC,GACvC,IAAInB,EACAoB,EACAP,EACAQ,EAIJ,IAFArB,EAAOnB,EAAMmB,KACboB,EAAM,GACAP,EAAI,EAAGA,EAAIM,EAAMxB,OAAQkB,IAC9BQ,EAAIF,EAAON,GACXO,EAAIN,KAAM7B,EAAQoC,GAAKrB,EAAKqB,GAAGC,MAEhC,OAAOF,CACR,CJiGWG,CAAe7B,EAAIT,EAASK,GAG/B,IAAIE,EAAML,EAAOL,EAAEkB,KAAMP,EAAIR,EAASC,EAAQG,EC7H9C,CAENY,UAAY,KD4Hd"}